import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load dataset
data = fetch_california_housing()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = data.target

# Preprocessing: Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Smart Regression 1: Linear Regression with cross-validation
lr = LinearRegression()
cv_scores_lr = cross_val_score(lr, X_train, y_train, cv=5)
print("Linear Regression CV Score:", np.mean(cv_scores_lr))

lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
print("Linear Regression RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_lr)))
print("Linear Regression R2 Score:", r2_score(y_test, y_pred_lr))

# Smart Regression 2: Ridge Regression
ridge = Ridge(alpha=1.0)
cv_scores_ridge = cross_val_score(ridge, X_train, y_train, cv=5)
print("Ridge Regression CV Score:", np.mean(cv_scores_ridge))

ridge.fit(X_train, y_train)
y_pred_ridge = ridge.predict(X_test)
print("Ridge Regression RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_ridge)))
print("Ridge Regression R2 Score:", r2_score(y_test, y_pred_ridge))
